use database pacific_retail_db;
use schema silver;

-- Silver Customer Table
CREATE TABLE IF NOT EXISTS SILVER.CUSTOMER (
    customer_id INT,
    name STRING,
    email STRING,
    country STRING,
    customer_type STRING,
    registration_date DATE,
	age INT,
    gender STRING,
    total_purchases INT,
    last_updated_timestamp TIMESTAMP_NTZ DEFAULT CURRENT_TIMESTAMP()
);
	
CREATE TABLE IF NOT EXISTS SILVER.PRODUCT (
	   product_id INT,
		name STRING,
		category STRING,
		brand STRING,
		price FLOAT,
		stock_quantity INT,
		rating FLOAT,
		is_active BOOLEAN,
		last_updated_timestamp TIMESTAMP_NTZ DEFAULT CURRENT_TIMESTAMP()
	);

CREATE TABLE IF NOT EXISTS SILVER.ORDERS (
    transaction_id STRING,
    customer_id INT,
    product_id INT,
    quantity INT,
    store_type STRING,
    total_amount DOUBLE,
    transaction_date DATE,
    payment_method STRING,
    last_updated_timestamp TIMESTAMP_NTZ DEFAULT CURRENT_TIMESTAMP()
);


----- Creating streams to capture changes in our incremental loading ----
use database pacific_retail_db;
use schema bronze;      -- as we're planning to capture changes coming from staged files

create or replace stream customer_changes_stream on table raw_customer
    append_only = True;

create or replace stream product_changes_stream on table raw_product
    append_only = True;

create or replace stream order_changes_stream on table raw_order
    append_only = True;

show streams in pacific_retail_db.bronze;

----- Transformations as per biz rules and clean-up of the data ---------
/* Customer Data Transformations:
Email validation --> Ensures email is not null
Customer type standardization ---> Normalizes customer types to "Regular", "Premium", "Unknown"
Age verification ---> Ensures the age is between 18 and 120
Gender standardization ---> Classifies gender as "Male", "Female", or "Other"
Total purchase validation ---> Ensure the total is a number, default value is 0 if invalid */

------- Customer Transformations using Stored Procedures ---------

use database pacific_retail_db;
use schema silver;

----- Transformation procedure for Customer data starts ---------
create or replace procedure process_customer_changes()
returns string
language sql
as
$$
declare 
    rows_inserted INT;
    rows_updated INT;
begin
    --- Merge changes into silver layer ---
    MERGE INTO silver.customer AS target
    USING (
    SELECT 
        customer_id,
        name,
        email,
        country,
        ----- Customer type standardization ----
        CASE 
            WHEN TRIM(UPPER(customer_type)) IN ('REGULAR', 'REG', 'R') THEN 'Regular'
            WHEN TRIM(UPPER(customer_type)) IN ('PREMIUM', 'PREM', 'P') THEN 'Premium'
            ELSE 'Unknown'
        END AS customer_type,

        registration_date,
        ------- Age validation --------
        CASE
            when age between 18 and 120 then age
            ELSE null
        end as age,

        -- Gender standardization ---
        CASE
            when trim(upper(gender)) in ('M', 'MALE') then 'Male'
            when trim(upper(gender)) in ('F', 'FEMALE') then 'Female'
        end as gender,
        ----- Total Purchase validation ----------
        CASE
            when total_purchases >= 0 THEN total_purchases
            ELSE 0
        END AS total_purchases,

        current_timestamp() AS last_updated_timestamp
    FROM bronze.customer_changes_stream
    WHERE customer_id is not null and email is not null 
    ) AS source
    ON target.customer_id = source.customer_id
    WHEN matched then
    UPDATE SET
        name = source.name,
        email = source.email,
        country = source.country,
      customer_type = source.customer_type,
      registration_date = source.registration_date,
      age = source.age,
      gender = source.gender,
      total_purchases = source.total_purchases,
      last_updated_timestamp = source.last_updated_timestamp
    WHEN NOT MATCHED THEN
    INSERT (customer_id, name, email, country, customer_type, registration_date, age, gender, total_purchases, last_updated_timestamp)
    VALUES (source.customer_id, source.name, source.email, source.country, source.customer_type, source.registration_date, source.age, source.gender, source.total_purchases, source.last_updated_timestamp);

    --- Return summary of ops
    
    RETURN 'Processed customer records';
END;
$$;

call process_customer_changes();

--- Create task
create or replace task silver_customer_merge_task
warehouse = compute_wh
---schedule = 'USING CRON */5 * * * * America/New_York'  ---- Runs every 5 minutes

AS
call process_customer_changes();

alter task silver_customer_merge_task resume;
alter task silver_customer_merge_task suspend;

select * from pacific_retail_db.silver.customer;
    
SELECT COUNT(*) FROM bronze.customer_changes_stream 
WHERE customer_id IS NULL OR email IS NULL;

SELECT * FROM bronze.customer_changes_stream LIMIT 10;

-- Count records in stream
SELECT COUNT(*) FROM bronze.customer_changes_stream;
